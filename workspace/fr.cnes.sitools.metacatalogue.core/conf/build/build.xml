<!-- ===================================
==  Copyright 2010-2013 CNES - CENTRE NATIONAL d'ETUDES SPATIALES
==  
==  This file is part of SITools2.
==  
==  SITools2 is free software: you can redistribute it and/or modify
==  it under the terms of the GNU General Public License as published by
==  the Free Software Foundation, either version 3 of the License, or
==  (at your option) any later version.
==  
==  SITools2 is distributed in the hope that it will be useful,
==  but WITHOUT ANY WARRANTY; without even the implied warranty of
==  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
==  GNU General Public License for more details.
==  
==  You should have received a copy of the GNU General Public License
==  along with SITools2.  If not, see <http://www.gnu.org/licenses/>.
==================================== -->
<!--
==============================================================================
=== Build file to allow ant (http://jakarta.apache.org/ant/) to be used
=== to build the Sitools project.
===
=== Author : AKKA Technologies
===
=== name    : nom du projet
===	default : tache ant executee par defaut
===	basedir : repertoire courant lors de l'execution des taches ant
===
==============================================================================
-->

<project name="sitools-metacatalogue-build" default="build" basedir="../..">
	<property file="build.properties" />
		
	<property file="conf/build/properties/build-${HOST}.properties" />

	<import file="userlibraries/metacatalogue-core.userlibraries.ant.xml" optional="false" />
	
	<property name="cots.dir" value="${ROOT_DIRECTORY}/cots"/>
	
	
	<!--
   ========================================================================
     Targets projet
   ========================================================================
	-->

	<target name="build" depends="deploy-jar-projet, javadoc-projet" />
	
	<target name="deploy-jar-projet" description="Deploiement local de l'application" depends="init, prepare, compile, jar, deploy-jar" />
	
	<target name="javadoc-projet" description="Generation du ZIP contenant la javadoc du projet" depends="init, prepare, javadoc" />

		
		
		
		
		
	<!-- 
	========================================================================
    Properties
    ========================================================================	
	-->	

	<!-- Informations generales sur le projet -->
	<property name="project.name" value="fr.cnes.sitools.metacatalogue.core" />
	<property name="project.fullname" value="Sitools2/Metacatalogue" />
	<property name="project.version" value="0.1" />


	<!-- Nom des packages du projet utilises par javadoc -->
	<property name="project.packagenames" value="fr.cnes.sitools" />

	<!-- Information sur les auteurs du projet -->
	<property name="author" value="AKKA Technologies" />
	<property name="year" value="2011, 2012" />

	<!-- ParamÃ¨tres de compilation -->
	<property name="debug" value="true" />
	<property name="optimize" value="off" />
	<property name="deprecation" value="off" />
	<property name="encoding" value="UTF-8" />

	<property name="conf.dir" value="conf" />
	<property name="src.dir" value="src" />
	<property name="conf.properties.dir" value="${conf.dir}/properties" />


	<property name="conf.build.properties.dir" value="${conf.dir}/build/properties" />
	<property name="conf.build.userlib.dir" value="${conf.dir}/build/userlibraries" />

	<property name="conf.reference.dir" value="${conf.dir}/reference" />
	<property name="conf.jar.dir" value="${conf.dir}/jar" />


	<property file="${conf.reference.dir}/metacatalogue-reference.properties" prefix="properties" />

	<!-- Repertoires destination pour la construction de l'application  -->
	<property name="out.dir" value="." />
	<property name="out.classes.dir" value="${out.dir}/bin" />
	<property name="out.javadoc.dir" value="${out.dir}/javadoc" />
	<property name="out.jar.dir" value="../${out.dir}/jar" />

	<!-- Repertoires de deploiement des fichiers "externes" de l'application -->
	<property name="dist.dir" value="dist" />
	<property name="dist.bin.dir" value="${dist.dir}" />
	<property name="dist.conf.dir" value="${dist.dir}" />
	<property name="dist.lib.dir" value="${dist.dir}/lib" />
		
		
		
	<path id="compile.classpath">
		<path refid="geo_tools" />
		<path refid="geoAPI" />
		<path refid="misc" />
		<path refid="solrj" />
		<path refid="geo_tools_extensions" />
		<path refid="restlet_2_1_0" />
		<path refid="jsonpath" />
		<path refid="libraries" />
	</path>

	<target name="prepare">
		<!-- Creation des repertoires dist.dir et out.jar.dir -->
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${out.classes.dir}" />
	</target>


	<target name="compile">
		<javac srcdir="./src" destdir="${out.classes.dir}" debug="${debug}" deprecation="${deprecation}" optimize="${optimize}" encoding="${encoding}" includeAntRuntime="false">
			<classpath refid="compile.classpath" />
		</javac>
	</target>

	<target name="jar">
		<!-- Creation d'un repertoire temporaire -->
		<mkdir dir="${out.dir}/tmp" />

		<!-- Copie le fichier manifest afin de remplacer le token @version@ par 
			le numero de version -->
		<copy file="${conf.jar.dir}/manifest" todir="${out.dir}/tmp" filtering="on" />

		<!-- Rajoute le classpath au Manifest -->
		<echo message="Root directory : ${ROOT_DIRECTORY}." />
		<echo message="Compile classpath : ${toString:compile.classpath}" />
		<pathconvert property="relative.classpath" refid="compile.classpath" pathsep=" ">
			<!-- <globmapper from="${ROOT_DIRECTORY}*" to="../../*"/> -->
		</pathconvert>
		<echo message="Relative classpath : ${relative.classpath}" />


		<echo file="${out.dir}/tmp/manifest" append="true" message="Class-Path: . ${relative.classpath}"></echo>


		<replace file="${out.dir}/tmp/manifest" token="\" value='/' />
		<replace file="${out.dir}/tmp/manifest" token="${ROOT_DIRECTORY}" value='../..' />



		<jar jarfile="${dist.dir}/${project.name}.jar" manifest="${out.dir}/tmp/manifest">
			<fileset includes="**/*.class" dir="${out.classes.dir}" />
			<!--<fileset includes="**/*.properties" dir="${conf.properties.dir}" />-->
		</jar>

		<!-- supprime le repertoire temporaire -->
		<delete dir="${out.dir}/tmp" />
	</target>

	<target name="cleanup">
	</target>

	<target name="deploy-jar">
	</target>
		
		
		
		
		
		
	
	<!-- ========================================================================================= 
			init : Target d'initialisation. Elle doit etre appelee par toute les autres 
			targets. ========================================================================================= -->
	<target name="init">
		<!-- Permet d'utiliser les valeurs ${TSTAMP}, ${DSTAMP}, ... dans les targets 
			si necessaires -->
		<tstamp />

		<!-- Affichage des parametres courant lors de l'execution de la tache Ant. -->
		<echo message="--------- ${project.fullname} ${project.version} ---------" />
		<echo message="" />

		<echo message="java.class.path    = ${java.class.path}" />
		<echo message="" />
		<echo message="java.home          = ${java.home}" />
		<echo message="user.home          = ${user.home}" />
		<echo message="" />
		<echo message="basedir            = ${basedir}" />
		<echo message="" />
		<echo message="compile.classpath  = ${toString:compile.classpath}" />

		<!-- Definition des filtres qui permettront de remplacer des token dans 
			les fichiers sources -->
		<!-- Les tokens seront de la forme suivante : @token@ dans les sources. 
			Et ils seront -->
		<!-- automatiquement remplaces par la valeur definie ci-dessous par Ant 
			lors de l'execution -->
		<!-- d'une tache ayant comme parametre : filtering="on" -->
		<filter token="project" value="${project.fullname}" />
		<filter token="version" value="${project.version}" />
		<filter token="year" value="${year}" />
		<filter token="author" value="${author}" />
		<filter token="owner" value="${owner}" />
	</target>
	
	
	
	<!-- ========================================================================================= 
	javadoc : genere un ZIP de la javadoc du projet ========================================================================================= -->

	<path id="javadoc">
		<pathelement location="${ROOT_DIRECTORY}/workspace/fr.cnes.sitools.metacatalogue.core/src" />		
	</path>
	
	<target name="javadoc">
	
		<!-- Suppression de l'ancien repertoire out.javadoc.dir -->
		<delete dir="${out.javadoc.dir}/sources" />
	
		<!-- Creation du repertoire out.javadoc.dir -->
		<mkdir dir="${out.javadoc.dir}/sources" />
	
		<!-- Generation de la javadoc du projet -->
		<javadoc sourcepathref="javadoc" packagenames="${project.packagenames}.*"
			destdir="${out.javadoc.dir}/sources" author="true" public="true"
			version="true" use="true" windowtitle="${project.fullname} ${project.version}"
			doctitle="${project.fullname} ${project.version}"
			bottom="Copyright &amp;copy; ${year} ${owner}. All Rights Reserved.">
			<classpath>
				<path>
					<fileset dir="${cots.dir}/restlet-jse-2.1.0">
						<include name="**/*.jar" />
					</fileset>
				</path>
				<path>
					<fileset dir="${ROOT_DIRECTORY}/workspace/fr.cnes.sitools.metacatalogue.libraries">
						<include name="**/*.jar" />
					</fileset>
				</path>				
			</classpath>
		</javadoc>
	
		<!-- Creation du ZIP contenant la javadoc du projet -->
		<zip zipfile="${dist.dir}/${project.name}-doc-${project.version}.zip"
			basedir="${out.javadoc.dir}" />
	
		<!-- Suppression du repertoire out.javadoc.dir -->
		<!-- delete dir="${out.javadoc.dir}"/ -->
	</target>
	
	
	
	
	
	
	
	
	
	
</project>
